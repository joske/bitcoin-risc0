// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{VERIFY_ELF, VERIFY_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use bitcoin::{block::{Header, Version}, hashes::sha256d::Hash, BlockHash, CompactTarget, TxMerkleNode};

// Example of how to create a sample block header
fn create_sample_block() -> Header {
    let zerohash = *Hash::from_bytes_ref(&[0u8; 32]);
    let onehash = *Hash::from_bytes_ref(&[1u8; 32]);
    Header {
        version: Version::TWO,       // Block version
        prev_blockhash: BlockHash::from_raw_hash(zerohash), // You can fill this with the previous block hash (all zero for a sample)
        merkle_root: TxMerkleNode::from_raw_hash(onehash),    // A dummy Merkle root for the transactions
        time: 1609459200,          // Timestamp for January 1, 2021
        bits: CompactTarget::from_hex("0x1d00ffff").unwrap(),          // Difficulty bits (this is the default value for Bitcoin)
        nonce: 0x18aea41a,         // Nonce for mining (a random value)
    }
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let input: Header = create_sample_block();

    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove(env, VERIFY_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let output: Header = receipt.journal.decode().unwrap();
    println!("time: {}", output.time);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(VERIFY_ID).unwrap();
}
